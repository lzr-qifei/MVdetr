logs/multiviewx/aug_deform_trans_w_dec_lr0.0005_baseR0.1_neck128_out0_alpha1.0_id0_drop0.0_dropcam0.0_worldRK4_10_imgRK12_10_2024-07-03_16-18-55
Settings:
{'reID': False, 'semi_supervised': 0, 'id_ratio': 0, 'cls_thres': 0.6, 'alpha': 1.0, 'use_mse': False, 'arch': 'resnet18', 'dataset': 'multiviewx', 'num_workers': 4, 'batch_size': 1, 'dropout': 0.0, 'dropcam': 0.0, 'epochs': 10, 'lr': 0.0005, 'base_lr_ratio': 0.1, 'weight_decay': 0.0001, 'resume': None, 'visualize': False, 'seed': 2021, 'deterministic': False, 'augmentation': True, 'world_feat': 'deform_trans_w_dec', 'bottleneck_dim': 128, 'outfeat_dim': 0, 'world_reduce': 4, 'world_kernel_size': 10, 'img_reduce': 12, 'img_kernel_size': 10, 'data': '/root/autodl-tmp/MultiviewX'}
rpts:  torch.Size([60000, 6, 4, 2])
Training...
Testing...
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
cost_class shape:  torch.Size([200, 100])
cost_pts shape:  torch.Size([200, 100])
cost torch.Size([200, 100])
sizes:  100
outlabel_shape:  torch.Size([200, 2])
indice shape:  [(tensor([  0,   1,   3,   4,   5,   6,   7,  12,  15,  16,  17,  20,  21,  22,
         25,  27,  28,  29,  31,  33,  34,  36,  37,  38,  39,  40,  43,  44,
         45,  52,  54,  56,  58,  60,  65,  66,  67,  69,  71,  74,  76,  79,
         84,  85,  87,  89,  91,  93,  94,  96,  98, 100, 104, 106, 109, 110,
        112, 119, 122, 124, 127, 129, 132, 133, 135, 137, 140, 142, 147, 148,
        150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 168,
        173, 175, 176, 177, 179, 180, 184, 185, 186, 190, 191, 192, 195, 196,
        197, 199]), tensor([19, 83, 44, 28, 67,  9, 92, 73, 54,  8, 12, 96, 70, 21, 26, 43, 42,  2,
        13, 33, 11, 79, 46, 61, 25, 40, 58, 41,  0, 37, 71, 93, 50, 62, 85, 80,
        91, 69,  4, 81, 36, 88, 22, 86, 68, 90, 14, 39, 57, 66, 15, 82, 31,  7,
        63, 47, 48, 64, 24, 56, 76, 35, 98, 84, 99,  1, 32, 78, 74, 89, 45, 55,
        75, 59, 27, 77, 17, 10, 23, 95, 18, 94, 38, 16, 60, 97, 52,  3, 49, 53,
        65,  5, 87, 20, 72,  6, 29, 30, 34, 51]))]
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
pos_all shape: torch.Size([200, 2])
scores shape:  torch.Size([1, 100])
pos shape: torch.Size([100, 2])
frame_idx torch.Size([100, 1])
tensor([[3.6000e+02, 9.0981e-01, 6.6215e-01],
        [3.6000e+02, 6.4946e-01, 6.7452e-02],
        [3.6000e+02, 3.2561e-01, 8.1309e-01],
        [3.6000e+02, 2.9866e-01, 6.0216e-02],
        [3.6000e+02, 8.8510e-01, 6.1432e-01],
        [3.6000e+02, 4.9058e-01, 1.1825e-01],
        [3.6000e+02, 8.2624e-01, 8.7703e-01],
        [3.6000e+02, 1.9182e-01, 5.7977e-01],
        [3.6000e+02, 7.9885e-01, 2.2390e-01],
        [3.6000e+02, 9.0554e-01, 1.5885e-01],
        [3.6000e+02, 2.3080e-01, 9.8338e-01],
        [3.6000e+02, 8.5088e-01, 4.8783e-01],
        [3.6000e+02, 3.9670e-01, 2.5573e-01],
        [3.6000e+02, 3.4094e-01, 5.5412e-01],
        [3.6000e+02, 3.3842e-01, 7.5476e-01],
        [3.6000e+02, 8.9806e-02, 4.1106e-01],
        [3.6000e+02, 9.3008e-01, 7.9300e-01],
        [3.6000e+02, 8.4725e-01, 8.4387e-01],
        [3.6000e+02, 7.3612e-01, 4.1040e-01],
        [3.6000e+02, 8.4136e-01, 3.2845e-01],
        [3.6000e+02, 1.8890e-01, 5.9552e-01],
        [3.6000e+02, 4.3456e-01, 1.9598e-01],
        [3.6000e+02, 8.0335e-01, 8.4249e-01],
        [3.6000e+02, 1.8081e-01, 7.2024e-01],
        [3.6000e+02, 8.2164e-01, 4.2423e-01],
        [3.6000e+02, 5.9109e-01, 9.2960e-01],
        [3.6000e+02, 5.6819e-01, 4.0919e-01],
        [3.6000e+02, 2.8959e-01, 6.7192e-02],
        [3.6000e+02, 1.5798e-01, 1.5780e-01],
        [3.6000e+02, 7.4209e-01, 7.3285e-01],
        [3.6000e+02, 8.7708e-01, 3.9721e-01],
        [3.6000e+02, 9.4287e-01, 8.4081e-01],
        [3.6000e+02, 6.6319e-01, 1.7438e-01],
        [3.6000e+02, 9.1752e-01, 5.4158e-01],
        [3.6000e+02, 8.4945e-01, 8.3545e-01],
        [3.6000e+02, 7.1449e-01, 4.3365e-01],
        [3.6000e+02, 2.6614e-01, 4.2367e-01],
        [3.6000e+02, 2.7337e-01, 1.4666e-01],
        [3.6000e+02, 3.6910e-02, 4.9445e-01],
        [3.6000e+02, 8.6161e-01, 5.8940e-01],
        [3.6000e+02, 1.1496e-01, 1.3536e-01],
        [3.6000e+02, 8.1536e-01, 3.9393e-01],
        [3.6000e+02, 5.0579e-01, 5.0635e-01],
        [3.6000e+02, 4.2770e-01, 9.1712e-02],
        [3.6000e+02, 6.7012e-02, 2.1959e-01],
        [3.6000e+02, 8.2230e-01, 8.5497e-01],
        [3.6000e+02, 8.4680e-01, 3.3555e-01],
        [3.6000e+02, 4.4715e-01, 7.7707e-01],
        [3.6000e+02, 4.2844e-01, 7.6872e-01],
        [3.6000e+02, 7.5405e-01, 2.6997e-01],
        [3.6000e+02, 7.4672e-01, 2.5647e-01],
        [3.6000e+02, 4.9706e-01, 7.7668e-01],
        [3.6000e+02, 7.4035e-01, 6.8573e-01],
        [3.6000e+02, 5.2464e-01, 7.4023e-01],
        [3.6000e+02, 7.1805e-02, 5.6697e-01],
        [3.6000e+02, 1.2523e-01, 7.5496e-01],
        [3.6000e+02, 7.3591e-01, 4.0498e-02],
        [3.6000e+02, 4.0814e-01, 7.2180e-01],
        [3.6000e+02, 2.2889e-01, 2.1634e-01],
        [3.6000e+02, 7.1687e-01, 5.3068e-01],
        [3.6000e+02, 4.1469e-01, 1.1971e-01],
        [3.6000e+02, 4.6082e-01, 4.7607e-01],
        [3.6000e+02, 2.5057e-01, 8.7028e-01],
        [3.6000e+02, 3.4318e-01, 4.7512e-01],
        [3.6000e+02, 9.0863e-01, 4.9688e-01],
        [3.6000e+02, 7.0747e-01, 2.3388e-02],
        [3.6000e+02, 3.8986e-01, 3.0878e-01],
        [3.6000e+02, 4.0157e-02, 7.3127e-01],
        [3.6000e+02, 5.9275e-01, 3.5340e-01],
        [3.6000e+02, 3.1857e-01, 3.1175e-01],
        [3.6000e+02, 9.2030e-01, 2.4645e-01],
        [3.6000e+02, 8.7876e-01, 8.5990e-01],
        [3.6000e+02, 2.1352e-01, 7.5193e-01],
        [3.6000e+02, 1.1793e-01, 8.4030e-01],
        [3.6000e+02, 5.1128e-01, 1.8908e-01],
        [3.6000e+02, 5.7920e-01, 3.3055e-01],
        [3.6000e+02, 8.2518e-01, 6.1647e-01],
        [3.6000e+02, 5.1307e-01, 7.8372e-01],
        [3.6000e+02, 2.6458e-01, 5.9378e-01],
        [3.6000e+02, 5.4856e-01, 1.9162e-01],
        [3.6000e+02, 7.6189e-01, 6.4587e-01],
        [3.6000e+02, 5.2155e-01, 4.0004e-01],
        [3.6000e+02, 6.4382e-01, 5.0386e-01],
        [3.6000e+02, 6.2874e-01, 7.6522e-01],
        [3.6000e+02, 9.6562e-01, 6.3711e-01],
        [3.6000e+02, 5.8559e-01, 1.5005e-01],
        [3.6000e+02, 8.0567e-02, 8.3410e-01],
        [3.6000e+02, 1.2269e-01, 5.0741e-01],
        [3.6000e+02, 8.6542e-01, 3.1257e-01],
        [3.6000e+02, 2.4167e-01, 5.2677e-01],
        [3.6000e+02, 9.3662e-01, 4.6916e-01],
        [3.6000e+02, 7.8753e-01, 8.8126e-01],
        [3.6000e+02, 3.7961e-01, 4.7827e-01],
        [3.6000e+02, 8.5420e-02, 1.5461e-01],
        [3.6000e+02, 2.0502e-01, 3.0816e-01],
        [3.6000e+02, 6.1754e-01, 2.0052e-01],
        [3.6000e+02, 1.9151e-01, 4.0699e-01],
        [3.6000e+02, 7.1984e-01, 5.7831e-01],
        [3.6000e+02, 8.6214e-01, 7.1465e-01],
        [3.6000e+02, 1.9099e-01, 6.2982e-01]])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
cost_class shape:  torch.Size([200, 100])
cost_pts shape:  torch.Size([200, 100])
cost torch.Size([200, 100])
sizes:  100
outlabel_shape:  torch.Size([200, 2])
indice shape:  [(tensor([  0,   1,   3,   4,   5,   6,   7,  12,  15,  16,  17,  20,  21,  22,
         25,  27,  28,  29,  31,  33,  34,  36,  37,  38,  39,  40,  43,  44,
         45,  52,  54,  56,  58,  60,  65,  66,  67,  69,  71,  74,  76,  79,
         84,  85,  87,  89,  91,  93,  94,  96,  98, 100, 104, 106, 109, 110,
        111, 112, 119, 122, 124, 127, 129, 132, 133, 137, 140, 142, 147, 148,
        150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 168,
        173, 175, 176, 177, 179, 180, 184, 185, 186, 190, 191, 192, 195, 196,
        197, 199]), tensor([21, 84, 45,  6, 68, 11, 93, 74, 55,  5,  2, 97, 71, 10, 26, 44, 43, 29,
        15, 33,  3, 80, 47, 62, 34, 41, 59, 42, 13, 37, 72, 94, 51, 63, 86, 81,
        92, 70,  8, 82, 36, 89, 24, 87, 69, 91, 14, 40, 58, 67, 17, 83, 32,  9,
        64, 48, 38, 49, 65, 35, 57, 77, 20, 99, 85,  1, 31, 79, 75, 90, 46, 56,
        76, 60,  4, 78, 19, 12, 25, 96, 27, 95, 39, 16, 61, 98, 53,  0, 50, 54,
        66,  7, 88, 18, 73, 28, 30, 22, 23, 52]))]
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
pos_all shape: torch.Size([200, 2])
scores shape:  torch.Size([1, 100])
pos shape: torch.Size([100, 2])
frame_idx torch.Size([100, 1])
tensor([[3.6100e+02, 9.0981e-01, 6.6215e-01],
        [3.6100e+02, 6.4946e-01, 6.7452e-02],
        [3.6100e+02, 3.2561e-01, 8.1309e-01],
        [3.6100e+02, 2.9866e-01, 6.0216e-02],
        [3.6100e+02, 8.8510e-01, 6.1432e-01],
        [3.6100e+02, 8.2624e-01, 8.7703e-01],
        [3.6100e+02, 1.9182e-01, 5.7977e-01],
        [3.6100e+02, 7.9885e-01, 2.2390e-01],
        [3.6100e+02, 9.0554e-01, 1.5885e-01],
        [3.6100e+02, 2.3080e-01, 9.8338e-01],
        [3.6100e+02, 8.5088e-01, 4.8783e-01],
        [3.6100e+02, 3.9670e-01, 2.5573e-01],
        [3.6100e+02, 3.4094e-01, 5.5412e-01],
        [3.6100e+02, 3.3842e-01, 7.5476e-01],
        [3.6100e+02, 8.9806e-02, 4.1106e-01],
        [3.6100e+02, 9.3008e-01, 7.9300e-01],
        [3.6100e+02, 7.3612e-01, 4.1040e-01],
        [3.6100e+02, 8.4136e-01, 3.2845e-01],
        [3.6100e+02, 1.8890e-01, 5.9552e-01],
        [3.6100e+02, 8.0335e-01, 8.4249e-01],
        [3.6100e+02, 1.8081e-01, 7.2024e-01],
        [3.6100e+02, 8.2164e-01, 4.2423e-01],
        [3.6100e+02, 5.9109e-01, 9.2960e-01],
        [3.6100e+02, 5.6819e-01, 4.0919e-01],
        [3.6100e+02, 2.8959e-01, 6.7192e-02],
        [3.6100e+02, 7.4209e-01, 7.3285e-01],
        [3.6100e+02, 8.7708e-01, 3.9721e-01],
        [3.6100e+02, 9.4287e-01, 8.4081e-01],
        [3.6100e+02, 6.6319e-01, 1.7438e-01],
        [3.6100e+02, 9.1752e-01, 5.4158e-01],
        [3.6100e+02, 8.4945e-01, 8.3545e-01],
        [3.6100e+02, 7.1449e-01, 4.3365e-01],
        [3.6100e+02, 2.7337e-01, 1.4666e-01],
        [3.6100e+02, 8.6161e-01, 5.8940e-01],
        [3.6100e+02, 1.1496e-01, 1.3536e-01],
        [3.6100e+02, 4.2770e-01, 9.1712e-02],
        [3.6100e+02, 6.7012e-02, 2.1959e-01],
        [3.6100e+02, 8.2230e-01, 8.5497e-01],
        [3.6100e+02, 4.4715e-01, 7.7707e-01],
        [3.6100e+02, 4.2844e-01, 7.6872e-01],
        [3.6100e+02, 7.5405e-01, 2.6997e-01],
        [3.6100e+02, 7.4672e-01, 2.5647e-01],
        [3.6100e+02, 4.9706e-01, 7.7668e-01],
        [3.6100e+02, 5.2464e-01, 7.4023e-01],
        [3.6100e+02, 7.3591e-01, 4.0498e-02],
        [3.6100e+02, 4.0814e-01, 7.2180e-01],
        [3.6100e+02, 4.1469e-01, 1.1971e-01],
        [3.6100e+02, 4.6082e-01, 4.7607e-01],
        [3.6100e+02, 2.5057e-01, 8.7028e-01],
        [3.6100e+02, 3.4318e-01, 4.7512e-01],
        [3.6100e+02, 9.0863e-01, 4.9688e-01],
        [3.6100e+02, 7.0747e-01, 2.3388e-02],
        [3.6100e+02, 3.8986e-01, 3.0878e-01],
        [3.6100e+02, 4.0157e-02, 7.3127e-01],
        [3.6100e+02, 5.9275e-01, 3.5340e-01],
        [3.6100e+02, 8.7876e-01, 8.5990e-01],
        [3.6100e+02, 2.1352e-01, 7.5193e-01],
        [3.6100e+02, 5.7920e-01, 3.3055e-01],
        [3.6100e+02, 8.2518e-01, 6.1647e-01],
        [3.6100e+02, 5.1307e-01, 7.8372e-01],
        [3.6100e+02, 5.4856e-01, 1.9162e-01],
        [3.6100e+02, 5.2155e-01, 4.0004e-01],
        [3.6100e+02, 6.2874e-01, 7.6522e-01],
        [3.6100e+02, 9.6562e-01, 6.3711e-01],
        [3.6100e+02, 5.8559e-01, 1.5005e-01],
        [3.6100e+02, 8.0567e-02, 8.3410e-01],
        [3.6100e+02, 8.6542e-01, 3.1257e-01],
        [3.6100e+02, 2.4167e-01, 5.2677e-01],
        [3.6100e+02, 7.8753e-01, 8.8126e-01],
        [3.6100e+02, 3.7961e-01, 4.7827e-01],
        [3.6100e+02, 8.5420e-02, 1.5461e-01],
        [3.6100e+02, 6.1754e-01, 2.0052e-01],
        [3.6100e+02, 1.9151e-01, 4.0699e-01],
        [3.6100e+02, 7.1984e-01, 5.7831e-01],
        [3.6100e+02, 8.6214e-01, 7.1465e-01],
        [3.6100e+02, 1.9099e-01, 6.2982e-01],
        [3.6100e+02, 3.7806e-01, 3.2931e-01],
        [3.6100e+02, 4.2756e-01, 3.9128e-01],
        [3.6100e+02, 6.4400e-01, 5.4289e-01],
        [3.6100e+02, 4.5656e-01, 8.9673e-01],
        [3.6100e+02, 6.5231e-01, 8.1462e-01],
        [3.6100e+02, 8.1983e-01, 5.5943e-01],
        [3.6100e+02, 8.0469e-01, 9.1931e-01],
        [3.6100e+02, 1.8888e-01, 6.5834e-01],
        [3.6100e+02, 3.5493e-01, 1.8844e-01],
        [3.6100e+02, 2.9220e-01, 1.3308e-01],
        [3.6100e+02, 7.1129e-01, 7.0944e-01],
        [3.6100e+02, 2.6001e-01, 1.7412e-01],
        [3.6100e+02, 3.8281e-01, 5.1405e-01],
        [3.6100e+02, 3.1636e-01, 5.3422e-01],
        [3.6100e+02, 8.9758e-01, 2.1767e-01],
        [3.6100e+02, 4.1169e-01, 5.0128e-01],
        [3.6100e+02, 2.4575e-01, 8.6229e-01],
        [3.6100e+02, 5.6477e-01, 4.2689e-01],
        [3.6100e+02, 4.4085e-01, 1.2842e-01],
        [3.6100e+02, 4.3702e-01, 5.8189e-01],
        [3.6100e+02, 7.0475e-01, 8.1694e-01],
        [3.6100e+02, 2.7689e-01, 8.6838e-01],
        [3.6100e+02, 3.1857e-01, 1.9300e-01],
        [3.6100e+02, 6.3972e-01, 2.9307e-01]])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
cost_class shape:  torch.Size([200, 100])
cost_pts shape:  torch.Size([200, 100])
cost torch.Size([200, 100])
sizes:  100
outlabel_shape:  torch.Size([200, 2])
indice shape:  [(tensor([  0,   1,   3,   4,   5,   6,   7,  12,  15,  16,  17,  20,  21,  22,
         25,  27,  28,  29,  31,  33,  34,  36,  37,  38,  39,  40,  43,  44,
         45,  52,  54,  56,  58,  60,  65,  66,  67,  69,  71,  74,  76,  79,
         84,  85,  87,  89,  91,  93,  94,  96,  98, 100, 104, 106, 109, 110,
        111, 112, 119, 122, 124, 127, 129, 132, 133, 137, 140, 142, 147, 148,
        150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 168,
        173, 175, 176, 177, 179, 180, 184, 185, 186, 190, 191, 192, 195, 196,
        197, 199]), tensor([21, 84, 45, 24, 68, 18, 93, 74, 55, 11,  2, 97, 71,  0, 26, 44, 43, 28,
        15, 33, 10, 80, 47, 62, 34, 41, 59, 42, 13, 37, 72, 94, 51, 63, 86, 81,
        92, 70,  8, 82, 36, 89,  7, 87, 69, 91,  3, 40, 58, 67, 14, 83, 32,  9,
        64, 48, 38, 49, 65, 35, 57, 77, 20, 99, 85,  1, 31, 79, 75, 90, 46, 56,
        76, 60, 27, 78, 17, 12, 25, 96,  5, 95, 39, 16, 61, 98, 53,  4, 50, 54,
        66,  6, 88, 19, 73, 22, 29, 30, 23, 52]))]
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
pos_all shape: torch.Size([200, 2])
scores shape:  torch.Size([1, 100])
pos shape: torch.Size([100, 2])
frame_idx torch.Size([100, 1])
tensor([[3.6200e+02, 8.4694e-02, 7.8330e-01],
        [3.6200e+02, 2.1585e-01, 2.3855e-01],
        [3.6200e+02, 9.0981e-01, 6.6215e-01],
        [3.6200e+02, 6.4946e-01, 6.7452e-02],
        [3.6200e+02, 3.2561e-01, 8.1309e-01],
        [3.6200e+02, 2.9866e-01, 6.0216e-02],
        [3.6200e+02, 8.8510e-01, 6.1432e-01],
        [3.6200e+02, 4.9058e-01, 1.1825e-01],
        [3.6200e+02, 8.2624e-01, 8.7703e-01],
        [3.6200e+02, 1.9182e-01, 5.7977e-01],
        [3.6200e+02, 7.9885e-01, 2.2390e-01],
        [3.6200e+02, 9.0554e-01, 1.5885e-01],
        [3.6200e+02, 2.3080e-01, 9.8338e-01],
        [3.6200e+02, 8.5088e-01, 4.8783e-01],
        [3.6200e+02, 3.9670e-01, 2.5573e-01],
        [3.6200e+02, 3.4094e-01, 5.5412e-01],
        [3.6200e+02, 3.3842e-01, 7.5476e-01],
        [3.6200e+02, 8.9806e-02, 4.1106e-01],
        [3.6200e+02, 9.3008e-01, 7.9300e-01],
        [3.6200e+02, 8.4725e-01, 8.4387e-01],
        [3.6200e+02, 7.3612e-01, 4.1040e-01],
        [3.6200e+02, 8.4136e-01, 3.2845e-01],
        [3.6200e+02, 1.8890e-01, 5.9552e-01],
        [3.6200e+02, 4.3456e-01, 1.9598e-01],
        [3.6200e+02, 8.0335e-01, 8.4249e-01],
        [3.6200e+02, 1.8081e-01, 7.2024e-01],
        [3.6200e+02, 8.2164e-01, 4.2423e-01],
        [3.6200e+02, 5.9109e-01, 9.2960e-01],
        [3.6200e+02, 5.6819e-01, 4.0919e-01],
        [3.6200e+02, 2.8959e-01, 6.7192e-02],
        [3.6200e+02, 1.5798e-01, 1.5780e-01],
        [3.6200e+02, 7.4209e-01, 7.3285e-01],
        [3.6200e+02, 8.7708e-01, 3.9721e-01],
        [3.6200e+02, 9.4287e-01, 8.4081e-01],
        [3.6200e+02, 6.6319e-01, 1.7438e-01],
        [3.6200e+02, 9.1752e-01, 5.4158e-01],
        [3.6200e+02, 8.4945e-01, 8.3545e-01],
        [3.6200e+02, 7.1449e-01, 4.3365e-01],
        [3.6200e+02, 2.6614e-01, 4.2367e-01],
        [3.6200e+02, 2.7337e-01, 1.4666e-01],
        [3.6200e+02, 3.6910e-02, 4.9445e-01],
        [3.6200e+02, 8.6161e-01, 5.8940e-01],
        [3.6200e+02, 1.1496e-01, 1.3536e-01],
        [3.6200e+02, 8.1536e-01, 3.9393e-01],
        [3.6200e+02, 5.0579e-01, 5.0635e-01],
        [3.6200e+02, 4.2770e-01, 9.1712e-02],
        [3.6200e+02, 6.7012e-02, 2.1959e-01],
        [3.6200e+02, 8.2230e-01, 8.5497e-01],
        [3.6200e+02, 8.4680e-01, 3.3555e-01],
        [3.6200e+02, 4.4715e-01, 7.7707e-01],
        [3.6200e+02, 4.2844e-01, 7.6872e-01],
        [3.6200e+02, 7.5405e-01, 2.6997e-01],
        [3.6200e+02, 7.4672e-01, 2.5647e-01],
        [3.6200e+02, 4.9706e-01, 7.7668e-01],
        [3.6200e+02, 7.4035e-01, 6.8573e-01],
        [3.6200e+02, 5.2464e-01, 7.4023e-01],
        [3.6200e+02, 7.1805e-02, 5.6697e-01],
        [3.6200e+02, 1.2523e-01, 7.5496e-01],
        [3.6200e+02, 7.3591e-01, 4.0498e-02],
        [3.6200e+02, 4.0814e-01, 7.2180e-01],
        [3.6200e+02, 2.2889e-01, 2.1634e-01],
        [3.6200e+02, 7.1687e-01, 5.3068e-01],
        [3.6200e+02, 4.1469e-01, 1.1971e-01],
        [3.6200e+02, 4.6082e-01, 4.7607e-01],
        [3.6200e+02, 2.5057e-01, 8.7028e-01],
        [3.6200e+02, 3.4318e-01, 4.7512e-01],
        [3.6200e+02, 9.0863e-01, 4.9688e-01],
        [3.6200e+02, 7.0747e-01, 2.3388e-02],
        [3.6200e+02, 3.8986e-01, 3.0878e-01],
        [3.6200e+02, 4.0157e-02, 7.3127e-01],
        [3.6200e+02, 5.9275e-01, 3.5340e-01],
        [3.6200e+02, 3.1857e-01, 3.1175e-01],
        [3.6200e+02, 9.2030e-01, 2.4645e-01],
        [3.6200e+02, 8.7876e-01, 8.5990e-01],
        [3.6200e+02, 2.1352e-01, 7.5193e-01],
        [3.6200e+02, 1.1793e-01, 8.4030e-01],
        [3.6200e+02, 5.1128e-01, 1.8908e-01],
        [3.6200e+02, 5.7920e-01, 3.3055e-01],
        [3.6200e+02, 8.2518e-01, 6.1647e-01],
        [3.6200e+02, 5.1307e-01, 7.8372e-01],
        [3.6200e+02, 2.6458e-01, 5.9378e-01],
        [3.6200e+02, 5.4856e-01, 1.9162e-01],
        [3.6200e+02, 7.6189e-01, 6.4587e-01],
        [3.6200e+02, 5.2155e-01, 4.0004e-01],
        [3.6200e+02, 6.4382e-01, 5.0386e-01],
        [3.6200e+02, 6.2874e-01, 7.6522e-01],
        [3.6200e+02, 9.6562e-01, 6.3711e-01],
        [3.6200e+02, 5.8559e-01, 1.5005e-01],
        [3.6200e+02, 8.0567e-02, 8.3410e-01],
        [3.6200e+02, 1.2269e-01, 5.0741e-01],
        [3.6200e+02, 8.6542e-01, 3.1257e-01],
        [3.6200e+02, 2.4167e-01, 5.2677e-01],
        [3.6200e+02, 9.3662e-01, 4.6916e-01],
        [3.6200e+02, 7.8753e-01, 8.8126e-01],
        [3.6200e+02, 3.7961e-01, 4.7827e-01],
        [3.6200e+02, 8.5420e-02, 1.5461e-01],
        [3.6200e+02, 2.0502e-01, 3.0816e-01],
        [3.6200e+02, 6.1754e-01, 2.0052e-01],
        [3.6200e+02, 1.9151e-01, 4.0699e-01],
        [3.6200e+02, 7.1984e-01, 5.7831e-01]])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
cost_class shape:  torch.Size([200, 100])
cost_pts shape:  torch.Size([200, 100])
cost torch.Size([200, 100])
sizes:  100
outlabel_shape:  torch.Size([200, 2])
indice shape:  [(tensor([  0,   1,   3,   4,   5,   6,   7,  12,  15,  16,  17,  20,  21,  22,
         25,  27,  28,  29,  31,  33,  34,  36,  37,  38,  39,  40,  43,  44,
         45,  52,  54,  56,  58,  60,  65,  66,  67,  69,  71,  74,  76,  79,
         84,  85,  87,  89,  91,  93,  94,  96,  98, 100, 104, 106, 109, 110,
        111, 112, 119, 122, 124, 127, 129, 132, 133, 137, 140, 142, 147, 148,
        150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 168,
        173, 175, 176, 177, 179, 180, 184, 185, 186, 190, 191, 192, 195, 196,
        197, 199]), tensor([23, 84, 45, 24, 68,  7, 93, 74, 55, 11,  2, 97, 71, 15, 26, 44, 43, 28,
        18, 33, 10, 80, 47, 62, 34, 41, 59, 42, 13, 37, 72, 94, 51, 63, 86, 81,
        92, 70, 29, 82, 36, 89,  8, 87, 69, 91,  0, 40, 58, 67, 14, 83,  6,  9,
        64, 48, 38, 49, 65, 35, 57, 77, 20, 99, 85,  1, 31, 79, 75, 90, 46, 56,
        76, 60, 27, 78, 17, 12, 25, 96,  5, 95, 39, 16, 61, 98, 53,  4, 50, 54,
        66, 21, 88, 22, 73, 19, 32, 30,  3, 52]))]
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
pos_all shape: torch.Size([200, 2])
scores shape:  torch.Size([1, 100])
pos shape: torch.Size([100, 2])
frame_idx torch.Size([100, 1])
tensor([[3.6300e+02, 9.0981e-01, 6.6215e-01],
        [3.6300e+02, 6.4946e-01, 6.7452e-02],
        [3.6300e+02, 3.2561e-01, 8.1309e-01],
        [3.6300e+02, 2.9866e-01, 6.0216e-02],
        [3.6300e+02, 8.8510e-01, 6.1432e-01],
        [3.6300e+02, 4.9058e-01, 1.1825e-01],
        [3.6300e+02, 8.2624e-01, 8.7703e-01],
        [3.6300e+02, 1.9182e-01, 5.7977e-01],
        [3.6300e+02, 7.9885e-01, 2.2390e-01],
        [3.6300e+02, 9.0554e-01, 1.5885e-01],
        [3.6300e+02, 2.3080e-01, 9.8338e-01],
        [3.6300e+02, 8.5088e-01, 4.8783e-01],
        [3.6300e+02, 3.9670e-01, 2.5573e-01],
        [3.6300e+02, 3.4094e-01, 5.5412e-01],
        [3.6300e+02, 3.3842e-01, 7.5476e-01],
        [3.6300e+02, 8.9806e-02, 4.1106e-01],
        [3.6300e+02, 9.3008e-01, 7.9300e-01],
        [3.6300e+02, 8.4725e-01, 8.4387e-01],
        [3.6300e+02, 7.3612e-01, 4.1040e-01],
        [3.6300e+02, 8.4136e-01, 3.2845e-01],
        [3.6300e+02, 1.8890e-01, 5.9552e-01],
        [3.6300e+02, 4.3456e-01, 1.9598e-01],
        [3.6300e+02, 8.0335e-01, 8.4249e-01],
        [3.6300e+02, 1.8081e-01, 7.2024e-01],
        [3.6300e+02, 8.2164e-01, 4.2423e-01],
        [3.6300e+02, 5.9109e-01, 9.2960e-01],
        [3.6300e+02, 5.6819e-01, 4.0919e-01],
        [3.6300e+02, 2.8959e-01, 6.7192e-02],
        [3.6300e+02, 1.5798e-01, 1.5780e-01],
        [3.6300e+02, 7.4209e-01, 7.3285e-01],
        [3.6300e+02, 8.7708e-01, 3.9721e-01],
        [3.6300e+02, 9.4287e-01, 8.4081e-01],
        [3.6300e+02, 6.6319e-01, 1.7438e-01],
        [3.6300e+02, 9.1752e-01, 5.4158e-01],
        [3.6300e+02, 8.4945e-01, 8.3545e-01],
        [3.6300e+02, 7.1449e-01, 4.3365e-01],
        [3.6300e+02, 2.6614e-01, 4.2367e-01],
        [3.6300e+02, 2.7337e-01, 1.4666e-01],
        [3.6300e+02, 3.6910e-02, 4.9445e-01],
        [3.6300e+02, 8.6161e-01, 5.8940e-01],
        [3.6300e+02, 1.1496e-01, 1.3536e-01],
        [3.6300e+02, 8.1536e-01, 3.9393e-01],
        [3.6300e+02, 5.0579e-01, 5.0635e-01],
        [3.6300e+02, 4.2770e-01, 9.1712e-02],
        [3.6300e+02, 6.7012e-02, 2.1959e-01],
        [3.6300e+02, 8.2230e-01, 8.5497e-01],
        [3.6300e+02, 8.4680e-01, 3.3555e-01],
        [3.6300e+02, 4.4715e-01, 7.7707e-01],
        [3.6300e+02, 4.2844e-01, 7.6872e-01],
        [3.6300e+02, 7.5405e-01, 2.6997e-01],
        [3.6300e+02, 7.4672e-01, 2.5647e-01],
        [3.6300e+02, 4.9706e-01, 7.7668e-01],
        [3.6300e+02, 7.4035e-01, 6.8573e-01],
        [3.6300e+02, 5.2464e-01, 7.4023e-01],
        [3.6300e+02, 7.1805e-02, 5.6697e-01],
        [3.6300e+02, 1.2523e-01, 7.5496e-01],
        [3.6300e+02, 7.3591e-01, 4.0498e-02],
        [3.6300e+02, 4.0814e-01, 7.2180e-01],
        [3.6300e+02, 2.2889e-01, 2.1634e-01],
        [3.6300e+02, 7.1687e-01, 5.3068e-01],
        [3.6300e+02, 4.1469e-01, 1.1971e-01],
        [3.6300e+02, 4.6082e-01, 4.7607e-01],
        [3.6300e+02, 2.5057e-01, 8.7028e-01],
        [3.6300e+02, 3.4318e-01, 4.7512e-01],
        [3.6300e+02, 9.0863e-01, 4.9688e-01],
        [3.6300e+02, 7.0747e-01, 2.3388e-02],
        [3.6300e+02, 3.8986e-01, 3.0878e-01],
        [3.6300e+02, 4.0157e-02, 7.3127e-01],
        [3.6300e+02, 5.9275e-01, 3.5340e-01],
        [3.6300e+02, 3.1857e-01, 3.1175e-01],
        [3.6300e+02, 9.2030e-01, 2.4645e-01],
        [3.6300e+02, 8.7876e-01, 8.5990e-01],
        [3.6300e+02, 2.1352e-01, 7.5193e-01],
        [3.6300e+02, 1.1793e-01, 8.4030e-01],
        [3.6300e+02, 5.1128e-01, 1.8908e-01],
        [3.6300e+02, 5.7920e-01, 3.3055e-01],
        [3.6300e+02, 8.2518e-01, 6.1647e-01],
        [3.6300e+02, 5.1307e-01, 7.8372e-01],
        [3.6300e+02, 2.6458e-01, 5.9378e-01],
        [3.6300e+02, 5.4856e-01, 1.9162e-01],
        [3.6300e+02, 7.6189e-01, 6.4587e-01],
        [3.6300e+02, 5.2155e-01, 4.0004e-01],
        [3.6300e+02, 6.4382e-01, 5.0386e-01],
        [3.6300e+02, 6.2874e-01, 7.6522e-01],
        [3.6300e+02, 9.6562e-01, 6.3711e-01],
        [3.6300e+02, 5.8559e-01, 1.5005e-01],
        [3.6300e+02, 8.0567e-02, 8.3410e-01],
        [3.6300e+02, 1.2269e-01, 5.0741e-01],
        [3.6300e+02, 8.6542e-01, 3.1257e-01],
        [3.6300e+02, 2.4167e-01, 5.2677e-01],
        [3.6300e+02, 9.3662e-01, 4.6916e-01],
        [3.6300e+02, 7.8753e-01, 8.8126e-01],
        [3.6300e+02, 3.7961e-01, 4.7827e-01],
        [3.6300e+02, 8.5420e-02, 1.5461e-01],
        [3.6300e+02, 2.0502e-01, 3.0816e-01],
        [3.6300e+02, 6.1754e-01, 2.0052e-01],
        [3.6300e+02, 1.9151e-01, 4.0699e-01],
        [3.6300e+02, 7.1984e-01, 5.7831e-01],
        [3.6300e+02, 8.6214e-01, 7.1465e-01],
        [3.6300e+02, 1.9099e-01, 6.2982e-01]])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
cost_class shape:  torch.Size([200, 100])
cost_pts shape:  torch.Size([200, 100])
cost torch.Size([200, 100])
sizes:  100
outlabel_shape:  torch.Size([200, 2])
indice shape:  [(tensor([  0,   1,   3,   4,   5,   6,   7,  12,  15,  16,  17,  20,  21,  22,
         25,  27,  28,  29,  31,  33,  34,  36,  37,  38,  39,  40,  43,  44,
         45,  54,  56,  58,  60,  65,  66,  67,  69,  71,  74,  76,  79,  84,
         85,  87,  89,  91,  93,  94,  95,  96,  98, 100, 104, 106, 109, 110,
        112, 119, 122, 124, 127, 129, 132, 133, 135, 137, 140, 142, 147, 148,
        150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 168,
        173, 175, 176, 177, 179, 180, 184, 185, 186, 190, 191, 192, 195, 196,
        197, 199]), tensor([22, 82, 43, 11, 66,  9, 91, 72, 53,  3,  2, 95, 69,  0, 35, 42, 41, 25,
        15, 33, 10, 78, 45, 60, 30, 39, 57, 40, 27, 70, 92, 49, 61, 84, 79, 90,
        68,  1, 80, 36, 87, 19, 85, 67, 89, 14, 38, 56, 99, 65, 23, 81, 32,  7,
        62, 46, 47, 63, 18, 55, 75, 21, 97, 83, 98,  4, 31, 77, 73, 88, 44, 54,
        74, 58, 28, 76, 16, 12, 26, 94,  5, 93, 37, 17, 59, 96, 51, 13, 48, 52,
        64,  8, 86, 20, 71,  6, 29, 34, 24, 50]))]
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
pos_all shape: torch.Size([200, 2])
scores shape:  torch.Size([1, 100])
pos shape: torch.Size([100, 2])
frame_idx torch.Size([100, 1])
tensor([[3.6400e+02, 9.0981e-01, 6.6215e-01],
        [3.6400e+02, 6.4946e-01, 6.7452e-02],
        [3.6400e+02, 3.2561e-01, 8.1309e-01],
        [3.6400e+02, 2.9866e-01, 6.0216e-02],
        [3.6400e+02, 8.8510e-01, 6.1432e-01],
        [3.6400e+02, 4.9058e-01, 1.1825e-01],
        [3.6400e+02, 8.2624e-01, 8.7703e-01],
        [3.6400e+02, 1.9182e-01, 5.7977e-01],
        [3.6400e+02, 7.9885e-01, 2.2390e-01],
        [3.6400e+02, 9.0554e-01, 1.5885e-01],
        [3.6400e+02, 2.3080e-01, 9.8338e-01],
        [3.6400e+02, 8.5088e-01, 4.8783e-01],
        [3.6400e+02, 3.9670e-01, 2.5573e-01],
        [3.6400e+02, 3.4094e-01, 5.5412e-01],
        [3.6400e+02, 3.3842e-01, 7.5476e-01],
        [3.6400e+02, 8.9806e-02, 4.1106e-01],
        [3.6400e+02, 9.3008e-01, 7.9300e-01],
        [3.6400e+02, 8.4725e-01, 8.4387e-01],
        [3.6400e+02, 7.3612e-01, 4.1040e-01],
        [3.6400e+02, 8.4136e-01, 3.2845e-01],
        [3.6400e+02, 1.8890e-01, 5.9552e-01],
        [3.6400e+02, 4.3456e-01, 1.9598e-01],
        [3.6400e+02, 8.0335e-01, 8.4249e-01],
        [3.6400e+02, 1.8081e-01, 7.2024e-01],
        [3.6400e+02, 8.2164e-01, 4.2423e-01],
        [3.6400e+02, 5.9109e-01, 9.2960e-01],
        [3.6400e+02, 5.6819e-01, 4.0919e-01],
        [3.6400e+02, 2.8959e-01, 6.7192e-02],
        [3.6400e+02, 1.5798e-01, 1.5780e-01],
        [3.6400e+02, 7.4209e-01, 7.3285e-01],
        [3.6400e+02, 8.7708e-01, 3.9721e-01],
        [3.6400e+02, 9.4287e-01, 8.4081e-01],
        [3.6400e+02, 6.6319e-01, 1.7438e-01],
        [3.6400e+02, 9.1752e-01, 5.4158e-01],
        [3.6400e+02, 8.4945e-01, 8.3545e-01],
        [3.6400e+02, 7.1449e-01, 4.3365e-01],
        [3.6400e+02, 2.6614e-01, 4.2367e-01],
        [3.6400e+02, 2.7337e-01, 1.4666e-01],
        [3.6400e+02, 3.6910e-02, 4.9445e-01],
        [3.6400e+02, 8.6161e-01, 5.8940e-01],
        [3.6400e+02, 1.1496e-01, 1.3536e-01],
        [3.6400e+02, 8.1536e-01, 3.9393e-01],
        [3.6400e+02, 5.0579e-01, 5.0635e-01],
        [3.6400e+02, 4.2770e-01, 9.1712e-02],
        [3.6400e+02, 6.7012e-02, 2.1959e-01],
        [3.6400e+02, 8.2230e-01, 8.5497e-01],
        [3.6400e+02, 8.4680e-01, 3.3555e-01],
        [3.6400e+02, 4.4715e-01, 7.7707e-01],
        [3.6400e+02, 4.2844e-01, 7.6872e-01],
        [3.6400e+02, 7.5405e-01, 2.6997e-01],
        [3.6400e+02, 7.4672e-01, 2.5647e-01],
        [3.6400e+02, 4.9706e-01, 7.7668e-01],
        [3.6400e+02, 7.4035e-01, 6.8573e-01],
        [3.6400e+02, 5.2464e-01, 7.4023e-01],
        [3.6400e+02, 7.1805e-02, 5.6697e-01],
        [3.6400e+02, 1.2523e-01, 7.5496e-01],
        [3.6400e+02, 7.3591e-01, 4.0498e-02],
        [3.6400e+02, 4.0814e-01, 7.2180e-01],
        [3.6400e+02, 2.2889e-01, 2.1634e-01],
        [3.6400e+02, 7.1687e-01, 5.3068e-01],
        [3.6400e+02, 4.1469e-01, 1.1971e-01],
        [3.6400e+02, 4.6082e-01, 4.7607e-01],
        [3.6400e+02, 2.5057e-01, 8.7028e-01],
        [3.6400e+02, 3.4318e-01, 4.7512e-01],
        [3.6400e+02, 9.0863e-01, 4.9688e-01],
        [3.6400e+02, 7.0747e-01, 2.3388e-02],
        [3.6400e+02, 3.8986e-01, 3.0878e-01],
        [3.6400e+02, 4.0157e-02, 7.3127e-01],
        [3.6400e+02, 5.9275e-01, 3.5340e-01],
        [3.6400e+02, 3.1857e-01, 3.1175e-01],
        [3.6400e+02, 9.2030e-01, 2.4645e-01],
        [3.6400e+02, 8.7876e-01, 8.5990e-01],
        [3.6400e+02, 2.1352e-01, 7.5193e-01],
        [3.6400e+02, 1.1793e-01, 8.4030e-01],
        [3.6400e+02, 5.1128e-01, 1.8908e-01],
        [3.6400e+02, 5.7920e-01, 3.3055e-01],
        [3.6400e+02, 8.2518e-01, 6.1647e-01],
        [3.6400e+02, 5.1307e-01, 7.8372e-01],
        [3.6400e+02, 2.6458e-01, 5.9378e-01],
        [3.6400e+02, 5.4856e-01, 1.9162e-01],
        [3.6400e+02, 7.6189e-01, 6.4587e-01],
        [3.6400e+02, 5.2155e-01, 4.0004e-01],
        [3.6400e+02, 6.4382e-01, 5.0386e-01],
        [3.6400e+02, 6.2874e-01, 7.6522e-01],
        [3.6400e+02, 9.6562e-01, 6.3711e-01],
        [3.6400e+02, 5.8559e-01, 1.5005e-01],
        [3.6400e+02, 8.0567e-02, 8.3410e-01],
        [3.6400e+02, 1.2269e-01, 5.0741e-01],
        [3.6400e+02, 8.6542e-01, 3.1257e-01],
        [3.6400e+02, 2.4167e-01, 5.2677e-01],
        [3.6400e+02, 9.3662e-01, 4.6916e-01],
        [3.6400e+02, 7.8753e-01, 8.8126e-01],
        [3.6400e+02, 3.7961e-01, 4.7827e-01],
        [3.6400e+02, 8.5420e-02, 1.5461e-01],
        [3.6400e+02, 2.0502e-01, 3.0816e-01],
        [3.6400e+02, 6.1754e-01, 2.0052e-01],
        [3.6400e+02, 1.9151e-01, 4.0699e-01],
        [3.6400e+02, 7.1984e-01, 5.7831e-01],
        [3.6400e+02, 8.6214e-01, 7.1465e-01],
        [3.6400e+02, 1.9099e-01, 6.2982e-01]])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
cost_class shape:  torch.Size([200, 100])
cost_pts shape:  torch.Size([200, 100])
cost torch.Size([200, 100])
sizes:  100
outlabel_shape:  torch.Size([200, 2])
indice shape:  [(tensor([  0,   1,   3,   4,   5,   6,   7,  12,  15,  16,  17,  20,  21,  22,
         25,  27,  28,  29,  31,  33,  34,  36,  37,  38,  39,  40,  43,  44,
         45,  54,  56,  58,  60,  65,  66,  67,  69,  71,  74,  76,  79,  84,
         85,  87,  89,  91,  93,  94,  95,  96,  98, 100, 104, 106, 109, 110,
        112, 119, 122, 124, 127, 129, 132, 133, 135, 137, 140, 142, 147, 148,
        150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 168,
        173, 175, 176, 177, 179, 180, 184, 185, 186, 190, 191, 192, 195, 196,
        197, 199]), tensor([22, 82, 43, 11, 66,  9, 91, 72, 53,  8,  2, 95, 69,  0, 28, 42, 41, 25,
        15, 33, 10, 78, 45, 60, 30, 39, 57, 40, 27, 70, 92, 49, 61, 84, 79, 90,
        68,  1, 80, 36, 87, 19, 85, 67, 89, 14, 38, 56, 99, 65, 23, 81, 32, 35,
        62, 46, 47, 63, 18, 55, 75, 21, 97, 83, 98,  4, 31, 77, 73, 88, 44, 54,
        74, 58,  3, 76, 16, 12, 26, 94,  7, 93, 37, 17, 59, 96, 51, 13, 48, 52,
        64,  5, 86, 20, 71,  6, 29, 34, 24, 50]))]
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
pos_all shape: torch.Size([200, 2])
scores shape:  torch.Size([1, 100])
pos shape: torch.Size([100, 2])
frame_idx torch.Size([100, 1])
tensor([[3.6500e+02, 9.0981e-01, 6.6215e-01],
        [3.6500e+02, 6.4946e-01, 6.7452e-02],
        [3.6500e+02, 3.2561e-01, 8.1309e-01],
        [3.6500e+02, 2.9866e-01, 6.0216e-02],
        [3.6500e+02, 8.8510e-01, 6.1432e-01],
        [3.6500e+02, 4.9058e-01, 1.1825e-01],
        [3.6500e+02, 8.2624e-01, 8.7703e-01],
        [3.6500e+02, 1.9182e-01, 5.7977e-01],
        [3.6500e+02, 7.9885e-01, 2.2390e-01],
        [3.6500e+02, 9.0554e-01, 1.5885e-01],
        [3.6500e+02, 2.3080e-01, 9.8338e-01],
        [3.6500e+02, 8.5088e-01, 4.8783e-01],
        [3.6500e+02, 3.9670e-01, 2.5573e-01],
        [3.6500e+02, 3.4094e-01, 5.5412e-01],
        [3.6500e+02, 3.3842e-01, 7.5476e-01],
        [3.6500e+02, 8.9806e-02, 4.1106e-01],
        [3.6500e+02, 9.3008e-01, 7.9300e-01],
        [3.6500e+02, 8.4725e-01, 8.4387e-01],
        [3.6500e+02, 7.3612e-01, 4.1040e-01],
        [3.6500e+02, 8.4136e-01, 3.2845e-01],
        [3.6500e+02, 1.8890e-01, 5.9552e-01],
        [3.6500e+02, 4.3456e-01, 1.9598e-01],
        [3.6500e+02, 8.0335e-01, 8.4249e-01],
        [3.6500e+02, 1.8081e-01, 7.2024e-01],
        [3.6500e+02, 8.2164e-01, 4.2423e-01],
        [3.6500e+02, 5.9109e-01, 9.2960e-01],
        [3.6500e+02, 5.6819e-01, 4.0919e-01],
        [3.6500e+02, 2.8959e-01, 6.7192e-02],
        [3.6500e+02, 1.5798e-01, 1.5780e-01],
        [3.6500e+02, 7.4209e-01, 7.3285e-01],
        [3.6500e+02, 8.7708e-01, 3.9721e-01],
        [3.6500e+02, 9.4287e-01, 8.4081e-01],
        [3.6500e+02, 6.6319e-01, 1.7438e-01],
        [3.6500e+02, 9.1752e-01, 5.4158e-01],
        [3.6500e+02, 8.4945e-01, 8.3545e-01],
        [3.6500e+02, 7.1449e-01, 4.3365e-01],
        [3.6500e+02, 2.6614e-01, 4.2367e-01],
        [3.6500e+02, 2.7337e-01, 1.4666e-01],
        [3.6500e+02, 3.6910e-02, 4.9445e-01],
        [3.6500e+02, 8.6161e-01, 5.8940e-01],
        [3.6500e+02, 1.1496e-01, 1.3536e-01],
        [3.6500e+02, 8.1536e-01, 3.9393e-01],
        [3.6500e+02, 5.0579e-01, 5.0635e-01],
        [3.6500e+02, 4.2770e-01, 9.1712e-02],
        [3.6500e+02, 6.7012e-02, 2.1959e-01],
        [3.6500e+02, 8.2230e-01, 8.5497e-01],
        [3.6500e+02, 8.4680e-01, 3.3555e-01],
        [3.6500e+02, 4.4715e-01, 7.7707e-01],
        [3.6500e+02, 4.2844e-01, 7.6872e-01],
        [3.6500e+02, 7.5405e-01, 2.6997e-01],
        [3.6500e+02, 7.4672e-01, 2.5647e-01],
        [3.6500e+02, 4.9706e-01, 7.7668e-01],
        [3.6500e+02, 7.4035e-01, 6.8573e-01],
        [3.6500e+02, 5.2464e-01, 7.4023e-01],
        [3.6500e+02, 7.1805e-02, 5.6697e-01],
        [3.6500e+02, 1.2523e-01, 7.5496e-01],
        [3.6500e+02, 7.3591e-01, 4.0498e-02],
        [3.6500e+02, 4.0814e-01, 7.2180e-01],
        [3.6500e+02, 2.2889e-01, 2.1634e-01],
        [3.6500e+02, 7.1687e-01, 5.3068e-01],
        [3.6500e+02, 4.1469e-01, 1.1971e-01],
        [3.6500e+02, 4.6082e-01, 4.7607e-01],
        [3.6500e+02, 2.5057e-01, 8.7028e-01],
        [3.6500e+02, 3.4318e-01, 4.7512e-01],
        [3.6500e+02, 9.0863e-01, 4.9688e-01],
        [3.6500e+02, 7.0747e-01, 2.3388e-02],
        [3.6500e+02, 3.8986e-01, 3.0878e-01],
        [3.6500e+02, 4.0157e-02, 7.3127e-01],
        [3.6500e+02, 5.9275e-01, 3.5340e-01],
        [3.6500e+02, 3.1857e-01, 3.1175e-01],
        [3.6500e+02, 9.2030e-01, 2.4645e-01],
        [3.6500e+02, 8.7876e-01, 8.5990e-01],
        [3.6500e+02, 2.1352e-01, 7.5193e-01],
        [3.6500e+02, 1.1793e-01, 8.4030e-01],
        [3.6500e+02, 5.1128e-01, 1.8908e-01],
        [3.6500e+02, 5.7920e-01, 3.3055e-01],
        [3.6500e+02, 8.2518e-01, 6.1647e-01],
        [3.6500e+02, 5.1307e-01, 7.8372e-01],
        [3.6500e+02, 2.6458e-01, 5.9378e-01],
        [3.6500e+02, 5.4856e-01, 1.9162e-01],
        [3.6500e+02, 7.6189e-01, 6.4587e-01],
        [3.6500e+02, 5.2155e-01, 4.0004e-01],
        [3.6500e+02, 6.4382e-01, 5.0386e-01],
        [3.6500e+02, 6.2874e-01, 7.6522e-01],
        [3.6500e+02, 9.6562e-01, 6.3711e-01],
        [3.6500e+02, 5.8559e-01, 1.5005e-01],
        [3.6500e+02, 8.0567e-02, 8.3410e-01],
        [3.6500e+02, 1.2269e-01, 5.0741e-01],
        [3.6500e+02, 8.6542e-01, 3.1257e-01],
        [3.6500e+02, 2.4167e-01, 5.2677e-01],
        [3.6500e+02, 9.3662e-01, 4.6916e-01],
        [3.6500e+02, 7.8753e-01, 8.8126e-01],
        [3.6500e+02, 3.7961e-01, 4.7827e-01],
        [3.6500e+02, 8.5420e-02, 1.5461e-01],
        [3.6500e+02, 2.0502e-01, 3.0816e-01],
        [3.6500e+02, 6.1754e-01, 2.0052e-01],
        [3.6500e+02, 1.9151e-01, 4.0699e-01],
        [3.6500e+02, 7.1984e-01, 5.7831e-01],
        [3.6500e+02, 8.6214e-01, 7.1465e-01],
        [3.6500e+02, 1.9099e-01, 6.2982e-01]])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
cost_class shape:  torch.Size([200, 100])
cost_pts shape:  torch.Size([200, 100])
cost torch.Size([200, 100])
sizes:  100
outlabel_shape:  torch.Size([200, 2])
indice shape:  [(tensor([  0,   1,   3,   4,   5,   6,   7,  12,  15,  16,  17,  20,  21,  22,
         25,  27,  28,  29,  31,  33,  34,  36,  37,  38,  39,  40,  43,  44,
         45,  54,  56,  58,  60,  65,  66,  67,  69,  71,  74,  79,  84,  85,
         87,  89,  91,  93,  94,  95,  96,  98, 100, 104, 106, 109, 110, 112,
        119, 122, 124, 127, 129, 131, 132, 133, 135, 137, 140, 142, 147, 148,
        150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 168,
        173, 175, 176, 177, 179, 180, 184, 185, 186, 190, 191, 192, 195, 196,
        197, 199]), tensor([32, 81, 42,  7, 65,  8, 90, 71, 52,  3,  1, 94, 68, 17, 26, 41, 40, 28,
        14, 33, 12, 77, 44, 59, 21, 38, 56, 39, 13, 69, 91, 48, 60, 83, 78, 89,
        67,  0, 79, 86, 10, 84, 66, 88,  2, 37, 55, 98, 64, 22, 80, 30, 34, 61,
        45, 46, 62, 25, 54, 74, 20, 99, 96, 82, 97, 27, 31, 76, 72, 87, 43, 53,
        73, 57,  4, 75, 15, 11, 24, 93,  6, 92, 36, 16, 58, 95, 50, 35, 47, 51,
        63,  5, 85, 23, 70, 18, 29,  9, 19, 49]))]
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
pos_all shape: torch.Size([200, 2])
scores shape:  torch.Size([1, 100])
pos shape: torch.Size([100, 2])
frame_idx torch.Size([100, 1])
tensor([[3.6600e+02, 9.0981e-01, 6.6215e-01],
        [3.6600e+02, 6.4946e-01, 6.7452e-02],
        [3.6600e+02, 3.2561e-01, 8.1309e-01],
        [3.6600e+02, 2.9866e-01, 6.0216e-02],
        [3.6600e+02, 8.8510e-01, 6.1432e-01],
        [3.6600e+02, 4.9058e-01, 1.1825e-01],
        [3.6600e+02, 8.2624e-01, 8.7703e-01],
        [3.6600e+02, 1.9182e-01, 5.7977e-01],
        [3.6600e+02, 7.9885e-01, 2.2390e-01],
        [3.6600e+02, 9.0554e-01, 1.5885e-01],
        [3.6600e+02, 2.3080e-01, 9.8338e-01],
        [3.6600e+02, 8.5088e-01, 4.8783e-01],
        [3.6600e+02, 3.9670e-01, 2.5573e-01],
        [3.6600e+02, 3.4094e-01, 5.5412e-01],
        [3.6600e+02, 3.3842e-01, 7.5476e-01],
        [3.6600e+02, 8.9806e-02, 4.1106e-01],
        [3.6600e+02, 9.3008e-01, 7.9300e-01],
        [3.6600e+02, 8.4725e-01, 8.4387e-01],
        [3.6600e+02, 7.3612e-01, 4.1040e-01],
        [3.6600e+02, 8.4136e-01, 3.2845e-01],
        [3.6600e+02, 1.8890e-01, 5.9552e-01],
        [3.6600e+02, 4.3456e-01, 1.9598e-01],
        [3.6600e+02, 8.0335e-01, 8.4249e-01],
        [3.6600e+02, 1.8081e-01, 7.2024e-01],
        [3.6600e+02, 8.2164e-01, 4.2423e-01],
        [3.6600e+02, 5.9109e-01, 9.2960e-01],
        [3.6600e+02, 5.6819e-01, 4.0919e-01],
        [3.6600e+02, 2.8959e-01, 6.7192e-02],
        [3.6600e+02, 1.5798e-01, 1.5780e-01],
        [3.6600e+02, 7.4209e-01, 7.3285e-01],
        [3.6600e+02, 8.7708e-01, 3.9721e-01],
        [3.6600e+02, 9.4287e-01, 8.4081e-01],
        [3.6600e+02, 6.6319e-01, 1.7438e-01],
        [3.6600e+02, 9.1752e-01, 5.4158e-01],
        [3.6600e+02, 8.4945e-01, 8.3545e-01],
        [3.6600e+02, 7.1449e-01, 4.3365e-01],
        [3.6600e+02, 2.6614e-01, 4.2367e-01],
        [3.6600e+02, 2.7337e-01, 1.4666e-01],
        [3.6600e+02, 3.6910e-02, 4.9445e-01],
        [3.6600e+02, 8.6161e-01, 5.8940e-01],
        [3.6600e+02, 1.1496e-01, 1.3536e-01],
        [3.6600e+02, 8.1536e-01, 3.9393e-01],
        [3.6600e+02, 5.0579e-01, 5.0635e-01],
        [3.6600e+02, 4.2770e-01, 9.1712e-02],
        [3.6600e+02, 6.7012e-02, 2.1959e-01],
        [3.6600e+02, 8.2230e-01, 8.5497e-01],
        [3.6600e+02, 8.4680e-01, 3.3555e-01],
        [3.6600e+02, 4.4715e-01, 7.7707e-01],
        [3.6600e+02, 4.2844e-01, 7.6872e-01],
        [3.6600e+02, 7.5405e-01, 2.6997e-01],
        [3.6600e+02, 7.4672e-01, 2.5647e-01],
        [3.6600e+02, 4.9706e-01, 7.7668e-01],
        [3.6600e+02, 7.4035e-01, 6.8573e-01],
        [3.6600e+02, 5.2464e-01, 7.4023e-01],
        [3.6600e+02, 7.1805e-02, 5.6697e-01],
        [3.6600e+02, 1.2523e-01, 7.5496e-01],
        [3.6600e+02, 7.3591e-01, 4.0498e-02],
        [3.6600e+02, 4.0814e-01, 7.2180e-01],
        [3.6600e+02, 2.2889e-01, 2.1634e-01],
        [3.6600e+02, 7.1687e-01, 5.3068e-01],
        [3.6600e+02, 4.1469e-01, 1.1971e-01],
        [3.6600e+02, 4.6082e-01, 4.7607e-01],
        [3.6600e+02, 2.5057e-01, 8.7028e-01],
        [3.6600e+02, 3.4318e-01, 4.7512e-01],
        [3.6600e+02, 9.0863e-01, 4.9688e-01],
        [3.6600e+02, 7.0747e-01, 2.3388e-02],
        [3.6600e+02, 3.8986e-01, 3.0878e-01],
        [3.6600e+02, 4.0157e-02, 7.3127e-01],
        [3.6600e+02, 5.9275e-01, 3.5340e-01],
        [3.6600e+02, 3.1857e-01, 3.1175e-01],
        [3.6600e+02, 9.2030e-01, 2.4645e-01],
        [3.6600e+02, 8.7876e-01, 8.5990e-01],
        [3.6600e+02, 2.1352e-01, 7.5193e-01],
        [3.6600e+02, 1.1793e-01, 8.4030e-01],
        [3.6600e+02, 5.1128e-01, 1.8908e-01],
        [3.6600e+02, 5.7920e-01, 3.3055e-01],
        [3.6600e+02, 8.2518e-01, 6.1647e-01],
        [3.6600e+02, 5.1307e-01, 7.8372e-01],
        [3.6600e+02, 2.6458e-01, 5.9378e-01],
        [3.6600e+02, 5.4856e-01, 1.9162e-01],
        [3.6600e+02, 7.6189e-01, 6.4587e-01],
        [3.6600e+02, 5.2155e-01, 4.0004e-01],
        [3.6600e+02, 6.4382e-01, 5.0386e-01],
        [3.6600e+02, 6.2874e-01, 7.6522e-01],
        [3.6600e+02, 9.6562e-01, 6.3711e-01],
        [3.6600e+02, 5.8559e-01, 1.5005e-01],
        [3.6600e+02, 8.0567e-02, 8.3410e-01],
        [3.6600e+02, 1.2269e-01, 5.0741e-01],
        [3.6600e+02, 8.6542e-01, 3.1257e-01],
        [3.6600e+02, 2.4167e-01, 5.2677e-01],
        [3.6600e+02, 9.3662e-01, 4.6916e-01],
        [3.6600e+02, 7.8753e-01, 8.8126e-01],
        [3.6600e+02, 3.7961e-01, 4.7827e-01],
        [3.6600e+02, 8.5420e-02, 1.5461e-01],
        [3.6600e+02, 2.0502e-01, 3.0816e-01],
        [3.6600e+02, 6.1754e-01, 2.0052e-01],
        [3.6600e+02, 1.9151e-01, 4.0699e-01],
        [3.6600e+02, 7.1984e-01, 5.7831e-01],
        [3.6600e+02, 8.6214e-01, 7.1465e-01],
        [3.6600e+02, 1.9099e-01, 6.2982e-01]])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
cost_class shape:  torch.Size([200, 100])
cost_pts shape:  torch.Size([200, 100])
cost torch.Size([200, 100])
sizes:  100
outlabel_shape:  torch.Size([200, 2])
indice shape:  [(tensor([  0,   1,   3,   4,   5,   6,   7,  12,  15,  16,  17,  20,  21,  22,
         25,  27,  28,  29,  31,  33,  34,  36,  37,  38,  39,  40,  43,  44,
         45,  54,  56,  58,  60,  63,  65,  66,  67,  69,  71,  74,  79,  84,
         85,  87,  89,  91,  93,  94,  95,  96,  98, 100, 104, 106, 109, 110,
        112, 119, 122, 124, 127, 129, 131, 132, 133, 135, 137, 140, 142, 147,
        148, 150, 152, 153, 155, 156, 157, 158, 159, 161, 164, 165, 166, 168,
        173, 175, 176, 177, 179, 180, 184, 185, 186, 190, 191, 192, 195, 196,
        197, 199]), tensor([22, 80, 41, 10, 64,  8, 89, 70, 51,  3,  1, 93, 67, 34, 26, 40, 39, 25,
        14, 21, 12, 76, 43, 58, 32, 37, 55, 38, 13, 68, 90, 47, 59, 99, 82, 77,
        88, 66,  0, 78, 85, 19, 83, 65, 87,  2, 36, 54, 97, 63, 24, 79, 15,  7,
        60, 44, 45, 61, 18, 53, 73, 20, 98, 95, 81, 96, 27, 31, 75, 71, 86, 42,
        52, 72, 56,  4, 74, 16, 11, 92,  6, 91, 35, 17, 57, 94, 49,  9, 46, 50,
        62,  5, 84, 23, 69, 28, 29, 33, 30, 48]))]
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
pos_all shape: torch.Size([200, 2])
scores shape:  torch.Size([1, 100])
pos shape: torch.Size([100, 2])
frame_idx torch.Size([100, 1])
tensor([[3.6700e+02, 8.8510e-01, 6.1432e-01],
        [3.6700e+02, 9.3008e-01, 7.9300e-01],
        [3.6700e+02, 7.3612e-01, 4.1040e-01],
        [3.6700e+02, 1.8081e-01, 7.2024e-01],
        [3.6700e+02, 8.2230e-01, 8.5497e-01],
        [3.6700e+02, 8.4680e-01, 3.3555e-01],
        [3.6700e+02, 4.4715e-01, 7.7707e-01],
        [3.6700e+02, 4.9706e-01, 7.7668e-01],
        [3.6700e+02, 7.1805e-02, 5.6697e-01],
        [3.6700e+02, 4.0814e-01, 7.2180e-01],
        [3.6700e+02, 2.5057e-01, 8.7028e-01],
        [3.6700e+02, 3.8986e-01, 3.0878e-01],
        [3.6700e+02, 4.0157e-02, 7.3127e-01],
        [3.6700e+02, 2.1352e-01, 7.5193e-01],
        [3.6700e+02, 2.6458e-01, 5.9378e-01],
        [3.6700e+02, 6.4382e-01, 5.0386e-01],
        [3.6700e+02, 9.3662e-01, 4.6916e-01],
        [3.6700e+02, 7.8753e-01, 8.8126e-01],
        [3.6700e+02, 8.5420e-02, 1.5461e-01],
        [3.6700e+02, 2.0502e-01, 3.0816e-01],
        [3.6700e+02, 6.4400e-01, 5.4289e-01],
        [3.6700e+02, 8.0469e-01, 9.1931e-01],
        [3.6700e+02, 5.8487e-01, 5.3614e-01],
        [3.6700e+02, 2.9220e-01, 1.3308e-01],
        [3.6700e+02, 5.6477e-01, 4.2689e-01],
        [3.6700e+02, 2.7689e-01, 8.6838e-01],
        [3.6700e+02, 1.0028e-01, 7.3987e-01],
        [3.6700e+02, 6.3132e-01, 6.3487e-01],
        [3.6700e+02, 8.4694e-02, 7.8330e-01],
        [3.6700e+02, 6.4608e-01, 3.9027e-01],
        [3.6700e+02, 3.5984e-01, 2.9653e-01],
        [3.6700e+02, 2.2149e-01, 4.4477e-01],
        [3.6700e+02, 8.4282e-01, 5.9933e-01],
        [3.6700e+02, 6.6022e-01, 1.2324e-01],
        [3.6700e+02, 6.7517e-01, 4.8710e-01],
        [3.6700e+02, 1.2616e-01, 4.0052e-01],
        [3.6700e+02, 7.7862e-01, 7.6734e-01],
        [3.6700e+02, 7.8932e-01, 7.8018e-01],
        [3.6700e+02, 9.0981e-01, 6.6215e-01],
        [3.6700e+02, 6.4946e-01, 6.7452e-02],
        [3.6700e+02, 3.2561e-01, 8.1309e-01],
        [3.6700e+02, 2.9866e-01, 6.0216e-02],
        [3.6700e+02, 4.9058e-01, 1.1825e-01],
        [3.6700e+02, 8.2624e-01, 8.7703e-01],
        [3.6700e+02, 1.9182e-01, 5.7977e-01],
        [3.6700e+02, 7.9885e-01, 2.2390e-01],
        [3.6700e+02, 9.0554e-01, 1.5885e-01],
        [3.6700e+02, 2.3080e-01, 9.8338e-01],
        [3.6700e+02, 8.5088e-01, 4.8783e-01],
        [3.6700e+02, 3.9670e-01, 2.5573e-01],
        [3.6700e+02, 3.4094e-01, 5.5412e-01],
        [3.6700e+02, 3.3842e-01, 7.5476e-01],
        [3.6700e+02, 8.9806e-02, 4.1106e-01],
        [3.6700e+02, 8.4725e-01, 8.4387e-01],
        [3.6700e+02, 8.4136e-01, 3.2845e-01],
        [3.6700e+02, 1.8890e-01, 5.9552e-01],
        [3.6700e+02, 4.3456e-01, 1.9598e-01],
        [3.6700e+02, 8.0335e-01, 8.4249e-01],
        [3.6700e+02, 8.2164e-01, 4.2423e-01],
        [3.6700e+02, 5.9109e-01, 9.2960e-01],
        [3.6700e+02, 5.6819e-01, 4.0919e-01],
        [3.6700e+02, 2.8959e-01, 6.7192e-02],
        [3.6700e+02, 1.5798e-01, 1.5780e-01],
        [3.6700e+02, 7.4209e-01, 7.3285e-01],
        [3.6700e+02, 8.7708e-01, 3.9721e-01],
        [3.6700e+02, 9.4287e-01, 8.4081e-01],
        [3.6700e+02, 6.6319e-01, 1.7438e-01],
        [3.6700e+02, 9.1752e-01, 5.4158e-01],
        [3.6700e+02, 8.4945e-01, 8.3545e-01],
        [3.6700e+02, 7.1449e-01, 4.3365e-01],
        [3.6700e+02, 2.6614e-01, 4.2367e-01],
        [3.6700e+02, 2.7337e-01, 1.4666e-01],
        [3.6700e+02, 3.6910e-02, 4.9445e-01],
        [3.6700e+02, 8.6161e-01, 5.8940e-01],
        [3.6700e+02, 1.1496e-01, 1.3536e-01],
        [3.6700e+02, 8.1536e-01, 3.9393e-01],
        [3.6700e+02, 5.0579e-01, 5.0635e-01],
        [3.6700e+02, 4.2770e-01, 9.1712e-02],
        [3.6700e+02, 6.7012e-02, 2.1959e-01],
        [3.6700e+02, 4.2844e-01, 7.6872e-01],
        [3.6700e+02, 7.5405e-01, 2.6997e-01],
        [3.6700e+02, 7.4672e-01, 2.5647e-01],
        [3.6700e+02, 7.4035e-01, 6.8573e-01],
        [3.6700e+02, 5.2464e-01, 7.4023e-01],
        [3.6700e+02, 1.2523e-01, 7.5496e-01],
        [3.6700e+02, 7.3591e-01, 4.0498e-02],
        [3.6700e+02, 2.2889e-01, 2.1634e-01],
        [3.6700e+02, 7.1687e-01, 5.3068e-01],
        [3.6700e+02, 4.1469e-01, 1.1971e-01],
        [3.6700e+02, 4.6082e-01, 4.7607e-01],
        [3.6700e+02, 3.4318e-01, 4.7512e-01],
        [3.6700e+02, 9.0863e-01, 4.9688e-01],
        [3.6700e+02, 7.0747e-01, 2.3388e-02],
        [3.6700e+02, 5.9275e-01, 3.5340e-01],
        [3.6700e+02, 3.1857e-01, 3.1175e-01],
        [3.6700e+02, 9.2030e-01, 2.4645e-01],
        [3.6700e+02, 8.7876e-01, 8.5990e-01],
        [3.6700e+02, 1.1793e-01, 8.4030e-01],
        [3.6700e+02, 5.1128e-01, 1.8908e-01],
        [3.6700e+02, 5.7920e-01, 3.3055e-01]])
