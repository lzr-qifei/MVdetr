logs/multiviewx/aug_deform_trans_w_dec_lr0.0005_baseR0.1_neck128_out0_alpha1.0_id0_drop0.0_dropcam0.0_worldRK4_10_imgRK12_10_2024-07-01_17-46-06
Settings:
{'reID': False, 'semi_supervised': 0, 'id_ratio': 0, 'cls_thres': 0.6, 'alpha': 1.0, 'use_mse': False, 'arch': 'resnet18', 'dataset': 'multiviewx', 'num_workers': 4, 'batch_size': 1, 'dropout': 0.0, 'dropcam': 0.0, 'epochs': 10, 'lr': 0.0005, 'base_lr_ratio': 0.1, 'weight_decay': 0.0001, 'resume': None, 'visualize': False, 'seed': 2021, 'deterministic': False, 'augmentation': True, 'world_feat': 'deform_trans_w_dec', 'bottleneck_dim': 128, 'outfeat_dim': 0, 'world_reduce': 4, 'world_kernel_size': 10, 'img_reduce': 12, 'img_kernel_size': 10, 'data': '/root/autodl-tmp/MultiviewX'}
rpts:  torch.Size([60000, 6, 4, 2])
Training...
rpts:  torch.Size([1, 60000, 6, 4, 2])
enc src shape:  torch.Size([1, 60000, 128])
torch.Size([1, 60000, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
enc src shape:  torch.Size([1, 60000, 128])
torch.Size([1, 60000, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
enc src shape:  torch.Size([1, 60000, 128])
torch.Size([1, 60000, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
enc src shape:  torch.Size([1, 60000, 128])
torch.Size([1, 60000, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
enc src shape:  torch.Size([1, 60000, 128])
torch.Size([1, 60000, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
enc src shape:  torch.Size([1, 60000, 128])
torch.Size([1, 60000, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
before repeat:  torch.Size([1, 100, 2])
ref pts dec:  torch.Size([1, 100, 2])
torch.Size([1, 1, 8, 100, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
torch.Size([1, 1, 8, 100, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
torch.Size([1, 1, 8, 100, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
torch.Size([1, 1, 8, 100, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
torch.Size([1, 1, 8, 100, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
torch.Size([1, 1, 8, 100, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
