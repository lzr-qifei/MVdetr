logs/multiviewx/aug_deform_trans_w_dec_lr0.05_baseR0.1_neck128_out0_alpha1.0_id0_drop0.0_dropcam0.0_worldRK4_10_imgRK12_10_2024-07-04_17-12-19
Settings:
{'reID': False, 'semi_supervised': 0, 'id_ratio': 0, 'cls_thres': 0.6, 'alpha': 1.0, 'use_mse': False, 'arch': 'resnet18', 'dataset': 'multiviewx', 'num_workers': 4, 'batch_size': 1, 'dropout': 0.0, 'dropcam': 0.0, 'epochs': 10, 'lr': 0.05, 'base_lr_ratio': 0.1, 'weight_decay': 0.0001, 'resume': None, 'visualize': False, 'seed': 2021, 'deterministic': False, 'augmentation': True, 'world_feat': 'deform_trans_w_dec', 'bottleneck_dim': 128, 'outfeat_dim': 0, 'world_reduce': 4, 'world_kernel_size': 10, 'img_reduce': 12, 'img_kernel_size': 10, 'data': '/root/autodl-tmp/MultiviewX'}
rpts:  torch.Size([60000, 6, 4, 2])
pos_emb size:  [ 80 125]
Training...
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.7690, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0463, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(4.9191, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0497, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.3753, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0480, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.3838, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0429, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(4.8789, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0423, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(4.5483, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0491, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.3902, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0473, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 35])
cost torch.Size([200, 35])
indices0 shape:  35
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([35, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True]])
{'loss_ce': tensor(6.2097, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0463, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.2287, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0407, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.6479, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0463, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.0356, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0371, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 40])
cost torch.Size([200, 40])
indices0 shape:  40
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([40, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True]])
{'loss_ce': tensor(4.4821, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0447, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(4.8935, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0398, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(5.1422, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0521, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(4.9198, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0504, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 36])
cost torch.Size([200, 36])
indices0 shape:  36
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([36, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True]])
{'loss_ce': tensor(5.5151, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0413, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.1816, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0428, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(5.1152, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0446, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.2713, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0491, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.2488, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0435, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(4.7872, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0452, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(5.0498, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0462, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.1353, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0423, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 40])
cost torch.Size([200, 40])
indices0 shape:  40
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([40, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True]])
{'loss_ce': tensor(4.9455, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0443, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.0818, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0482, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.3867, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0421, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 40])
cost torch.Size([200, 40])
indices0 shape:  40
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([40, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True]])
{'loss_ce': tensor(5.0462, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0462, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(4.9716, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0469, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.4503, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0424, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(4.9779, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0518, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(4.4179, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0458, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 42])
cost torch.Size([200, 42])
indices0 shape:  42
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([42, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True]])
{'loss_ce': tensor(4.5673, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0465, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 35])
cost torch.Size([200, 35])
indices0 shape:  35
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([35, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True]])
{'loss_ce': tensor(5.7018, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0499, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 42])
cost torch.Size([200, 42])
indices0 shape:  42
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([42, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True]])
{'loss_ce': tensor(4.2184, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0493, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(4.5678, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0433, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 40])
cost torch.Size([200, 40])
indices0 shape:  40
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([40, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True]])
{'loss_ce': tensor(4.4418, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0446, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.4728, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0414, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.5863, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0485, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(5.2309, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0450, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 36])
cost torch.Size([200, 36])
indices0 shape:  36
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([36, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True]])
{'loss_ce': tensor(5.6408, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0469, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(4.9116, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0481, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.6183, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0463, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.4967, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0479, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 42])
cost torch.Size([200, 42])
indices0 shape:  42
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([42, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True]])
{'loss_ce': tensor(4.6051, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0496, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(4.9901, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0410, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.2695, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0593, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(4.9632, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0450, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.7568, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0536, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.4832, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0411, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.4718, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0477, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 40])
cost torch.Size([200, 40])
indices0 shape:  40
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([40, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True]])
{'loss_ce': tensor(4.7478, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0484, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(4.7764, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0471, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(5.0657, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0463, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.7217, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0477, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 36])
cost torch.Size([200, 36])
indices0 shape:  36
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([36, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True]])
{'loss_ce': tensor(5.1690, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0456, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.6799, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0438, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 40])
cost torch.Size([200, 40])
indices0 shape:  40
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([40, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True]])
{'loss_ce': tensor(4.8544, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0493, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(5.0534, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0468, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.6435, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0442, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.5503, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0459, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(4.8566, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0467, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.0934, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0466, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.8631, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0542, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.7387, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0440, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.5004, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0471, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.0413, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0485, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 35])
cost torch.Size([200, 35])
indices0 shape:  35
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([35, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True]])
{'loss_ce': tensor(5.7360, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0438, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 42])
cost torch.Size([200, 42])
indices0 shape:  42
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([42, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True]])
{'loss_ce': tensor(4.5475, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0443, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.4004, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0441, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(4.9397, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0468, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 36])
cost torch.Size([200, 36])
indices0 shape:  36
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([36, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True]])
{'loss_ce': tensor(5.3479, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0430, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.6075, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0441, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 35])
cost torch.Size([200, 35])
indices0 shape:  35
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([35, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True]])
{'loss_ce': tensor(5.7890, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0455, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.2619, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0412, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.1785, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0456, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.3002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0512, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 36])
cost torch.Size([200, 36])
indices0 shape:  36
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([36, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True]])
{'loss_ce': tensor(5.9004, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0501, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(5.4039, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0463, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.4943, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0461, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.4121, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0461, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 41])
cost torch.Size([200, 41])
indices0 shape:  41
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([41, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True]])
{'loss_ce': tensor(4.5684, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0405, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(4.7681, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0537, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
gt_cnt:  41
gt_cnt:  39
gt_cnt:  37
gt_cnt:  38
gt_cnt:  38
gt_cnt:  37
gt_cnt:  38
gt_cnt:  41
gt_cnt:  35
gt_cnt:  38
gt_cnt:  39
gt_cnt:  38
gt_cnt:  38
gt_cnt:  39
gt_cnt:  40
gt_cnt:  38
gt_cnt:  38
gt_cnt:  37
gt_cnt:  35
gt_cnt:  36
gt_cnt:  41
gt_cnt:  40
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 36])
cost torch.Size([200, 36])
indices0 shape:  36
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([36, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True]])
{'loss_ce': tensor(5.3150, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0467, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 39])
cost torch.Size([200, 39])
indices0 shape:  39
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([39, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True]])
{'loss_ce': tensor(5.0225, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0413, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 40])
cost torch.Size([200, 40])
indices0 shape:  40
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([40, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True]])
{'loss_ce': tensor(5.0255, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0470, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 37])
cost torch.Size([200, 37])
indices0 shape:  37
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([37, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True]])
{'loss_ce': tensor(5.3502, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0420, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 40])
cost torch.Size([200, 40])
indices0 shape:  40
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([40, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True]])
{'loss_ce': tensor(4.6684, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0429, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 200, 128])
ref pts dec:  torch.Size([1, 200, 2])
out_prob shape:  torch.Size([200, 1])
pos_c_cls:  torch.Size([200, 1])
tgt_ids:  tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
cost_class shape:  torch.Size([200, 1])
cost_pts shape:  torch.Size([200, 38])
cost torch.Size([200, 38])
indices0 shape:  38
outlabel_shape:  torch.Size([200, 1])
src_logit shape:  torch.Size([200, 1])
tgt_cls shape:  torch.Size([200])
tgt_pts_shape:  torch.Size([38, 2])
mask:  tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True, True, True, True, True, True, True, True, True, True, True,
         True, True]])
{'loss_ce': tensor(5.1409, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(0.0445, device='cuda:0', grad_fn=<DivBackward0>)}
tensor(0., device='cuda:0', dtype=torch.float64, requires_grad=True)
gt_cnt:  37
gt_cnt:  41
gt_cnt:  38
gt_cnt:  39
gt_cnt:  38
gt_cnt:  37
gt_cnt:  40
gt_cnt:  39
gt_cnt:  39
gt_cnt:  39
gt_cnt:  41
gt_cnt:  38
gt_cnt:  40
gt_cnt:  36
gt_cnt:  37
gt_cnt:  41
gt_cnt:  35
gt_cnt:  36
gt_cnt:  38
gt_cnt:  37
gt_cnt:  36
gt_cnt:  40
gt_cnt:  38
gt_cnt:  35
gt_cnt:  40
gt_cnt:  36
gt_cnt:  37
gt_cnt:  40
gt_cnt:  37
gt_cnt:  42
gt_cnt:  40
gt_cnt:  36
gt_cnt:  42
gt_cnt:  41
gt_cnt:  38
gt_cnt:  41
gt_cnt:  41
gt_cnt:  41
gt_cnt:  42
gt_cnt:  37
gt_cnt:  38
gt_cnt:  41
gt_cnt:  39
gt_cnt:  38
