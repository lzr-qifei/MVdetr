logs/multiviewx/aug_deform_trans_w_dec_lr0.0005_baseR0.1_neck128_out0_alpha1.0_id0_drop0.0_dropcam0.0_worldRK4_10_imgRK12_10_2024-07-03_11-15-10
Settings:
{'reID': False, 'semi_supervised': 0, 'id_ratio': 0, 'cls_thres': 0.6, 'alpha': 1.0, 'use_mse': False, 'arch': 'resnet18', 'dataset': 'multiviewx', 'num_workers': 4, 'batch_size': 1, 'dropout': 0.0, 'dropcam': 0.0, 'epochs': 10, 'lr': 0.0005, 'base_lr_ratio': 0.1, 'weight_decay': 0.0001, 'resume': None, 'visualize': False, 'seed': 2021, 'deterministic': False, 'augmentation': True, 'world_feat': 'deform_trans_w_dec', 'bottleneck_dim': 128, 'outfeat_dim': 0, 'world_reduce': 4, 'world_kernel_size': 10, 'img_reduce': 12, 'img_kernel_size': 10, 'data': '/root/autodl-tmp/MultiviewX'}
rpts:  torch.Size([60000, 6, 4, 2])
Training...
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.6632e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.1009, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.2415, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.9357e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.6169, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.9580e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.8036, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.3691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.1030e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.8990, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.3519e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.3712, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.7360e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.0878, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.8191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.8172e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.7441, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.0272, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.5815e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.3285, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.6168e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(214.2802, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.6426, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.5968, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.4089, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.7735, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.6156, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.6470e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.4631, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.8090e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.7650, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.5651e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.7431, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.2743e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.8576, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.6136, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.8547, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.5577e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(219.8941, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.7691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.4017, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(197.2987, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.7274e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.5656, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.3723e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.2691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.7377e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.7691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.0015, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.7236e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.3788, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.7899, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.0626e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.4162, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.3279e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.9928, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(217.2797, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.9780e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.9382, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.4051, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.1855e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.6963, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.5656, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.6047e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.0358, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.0902e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.8129, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.2661, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(215.1440, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(219.5440, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.6156, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.3110e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.1156, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.7069e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.7766, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.7558, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.4191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.0151e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.6415, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.2191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.5549e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(219.9691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(214.4748, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.3369e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.8847, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.4503e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(214.8375, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.7844, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.5776e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.6678, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.6144, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.2238e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.6419, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.9827e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(216.0015, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.4504, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.7998, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.0176e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.9941, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.8358, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.4504, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.0463e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.0114, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.0323e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.8701, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.3691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.5243e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.6969, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.8574e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.9007, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(215.7495, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.3262, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.2998, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.4887, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.0395, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.7960e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.2422, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.8890e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.9928, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.7735, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.6414, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.6136, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.6551, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.6939e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.8036, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.5367, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.6410e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.8477, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.1484e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.4631, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.7998, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.6708, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.0994, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.2553, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.9840, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.1001e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.4118, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.8276e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.3524, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.7729e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.3861, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.0441, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.4748, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.0198, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.7919e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.7187, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.4261, device='cuda:0', grad_fn=<DivBackward0>)}
Train Epoch: 1, Batch:100, loss: 0.000000, Time: 54.0
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.0237e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.3605, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.5037e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.1297, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.3765e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.2735, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.1032e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.5941, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.5683e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.0468, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.6470, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.5333, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(217.0941, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(198.8990, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.2806e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.5191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.3444e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(197.5191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.9236, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.7051e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(197.0272, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.4605e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.7844, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.6916e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.8137, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.3861, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.6864e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.1441, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.6858e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.3041, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.6414, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.8847, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.8382e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.6544, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.8261, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.9730e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.6488, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.8368e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.1119, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.5778e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.8987, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.2323, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.9191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.1067e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.5144, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.6685, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.7191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.8793e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.7525, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.3144e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(194.4577, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(198.3844, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.4566, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.0739, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.3180e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(193.4598, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.0739, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.2889e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.6144, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(198.2209, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.0600e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.9840, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.1123e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.3041, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.0015, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.3719e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.4748, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(214.3358, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.1945, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.5691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.5001e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.6938, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.5018e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.4107, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.9657, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.3579e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.1191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.4325e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.2579, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.3375e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.5480, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.6098e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.3605, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.8290e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.0739, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.8096e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(194.5273, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0005, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.2065, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.4146e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.3773, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.5941, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.2941, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.4941, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.7090e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.2309, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.9117, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.6085e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.3475, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.3819e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(214.2691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(2.2130e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(194.5063, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.7184, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.3980e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.9246, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.8163, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.6237e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.0941, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(219.5912, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.9107e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(195.1279, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.4757e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.3080, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.2634e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(218.4314, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.9368e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.4261, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.8084e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.6156, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.2658e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.4887, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.4631, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.4374, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.2184e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.3232, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.1682, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.2589e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.1441, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(193.8566, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.6682, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.8371e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.4504, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.4691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.2726e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.0272, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.9297e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.5390, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(214.1191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.0893, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.5397e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.6169, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.7172e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.6939, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.3804e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.2067, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.9577, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(2.9242e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.5005, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.1009, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.8733, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.7766, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.7449e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.6191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.4024e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(198.3442, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.5871e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.5303, device='cuda:0', grad_fn=<DivBackward0>)}
Train Epoch: 1, Batch:200, loss: 0.000000, Time: 102.0
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.0272e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.4191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.7708, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.8217e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.9626, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.9985e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.7330, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.2090, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.8475e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(194.3691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.0970e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.1558, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.7242e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.1578, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.6419, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.1079e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.7675, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.8938e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.9955, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.9698e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.5994, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.7424e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.3041, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.8191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.9911e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.1297, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(2.0470e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.1041, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.3892e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.3556, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(194.7603, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.9062, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.6144, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.9277e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.7872, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.8788, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.7856e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.7964, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.9383e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.5025, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.2377e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.7225, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.3415e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(195.7365, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(195.0785, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.0042, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.8608e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(196.8477, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.8840e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.4260, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.2797, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(2.4957e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.6425, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(218.4941, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(1.6491e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(217.2323, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.6415, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.6560e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.9191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.8407, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.9886e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.5756, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.7611e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.8576, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.5874, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.4941, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.4941, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.6426, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.0016, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.1155e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.3909, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.9608e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.9657, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.1156, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.7675, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.4829e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.6488, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.3051e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.8813, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.8232e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.2065, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.6941, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.8895, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.0858, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.9387, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.3024e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.8163, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.6020e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.1041, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.8529e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.0739, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.9349e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.1945, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.5691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.6943, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.3644e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.6682, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.3116e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.6156, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.9075e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.9558, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.5568e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.9191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.0977e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.0469, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.5367, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.2836, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.8846, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.0204e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.4314, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.1580e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.2735, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.2901, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.1441, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.4887, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.4740e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.5400, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(2.9109e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.3272, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.4887, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.6307e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.3441, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.7708, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.8312, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.8480e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.0739, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.7793, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.4792, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.4845e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.1691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.3514e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.4992, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.5333, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.3055e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(217.6699, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.9346e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.1682, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.1279, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.9702e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(198.8358, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.5720e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(214.5691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.9293e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.1041, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.4400e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.0280, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(216.5372, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.5042, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0004, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.0846, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.3170e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.9441, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.5913, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.5025, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.7525, device='cuda:0', grad_fn=<DivBackward0>)}
Train Epoch: 1, Batch:300, loss: 0.000000, Time: 146.6
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.4918e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.1297, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(198.0191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.9992e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.0812, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.6470, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.2090, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.8163, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.9764e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.1414, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.1311e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.3375, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.9388, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.5191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.1406e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.7883, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.9747, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.6054, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.3880e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.3171, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(4.5668e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(195.3862, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.9186e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.8990, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(202.6419, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(3.4563e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.9314, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.5010e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.0015, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.5473, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.3191e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.1090, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.1813e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(198.8847, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.3723e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(217.3788, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0004, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.1821, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.0191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.9840, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.6419, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.3043e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(210.0015, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.6389e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(200.4840, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.2796e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.0528, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.8306, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.2195e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(211.1156, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.4118, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.0762e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.0994, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.8608e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.2653, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.2579, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(212.0367, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.9620e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.1550, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.0056, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.5103, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.0441, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.1691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.3354e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.7788, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(199.9747, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.9272, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0001, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(207.6191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(204.8137, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0003, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(209.7964, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(6.7613e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.1009, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.1020e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.3191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.5752e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.4191, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.4129, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0006, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.2090, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.9545e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(205.0691, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.2735, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(0.0002, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(213.9246, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(8.5136e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(203.4051, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(7.7424e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(208.7431, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(5.1997e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(201.1156, device='cuda:0', grad_fn=<DivBackward0>)}
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
cost torch.Size([1, 100, 100])
sizes:  100
outlabel_shape:  torch.Size([100, 1])
tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
        1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=torch.float64)
tgt_pts_shape:  torch.Size([100, 2])
cuda:0 cpu cpu cuda:0
cuda:0 cuda:0 cuda:0 cuda:0
{'loss_ce': tensor(9.3734e-05, device='cuda:0', grad_fn=<MulBackward0>), 'loss_center': tensor(206.0941, device='cuda:0', grad_fn=<DivBackward0>)}
Train Epoch: 1, Batch:360, loss: 0.000000, Time: 173.1
Testing...
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
input_flatten:  torch.Size([1, 60000, 128])
o:  torch.Size([1, 60000, 8, 6, 4, 2])
after merge:  torch.Size([1, 128, 80, 125])
query shape:  torch.Size([1, 100, 128])
ref pts dec:  torch.Size([1, 100, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
input_flatten:  torch.Size([1, 10000, 128])
o:  torch.Size([1, 100, 8, 1, 4, 2])
pos shape: torch.Size([100, 2])
scores shape:  torch.Size([100, 1])
